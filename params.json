{"name":"Fluentpdo","tagline":"FluentPDO, smart SQL builder for PHP","body":"# FluentPDO [![Build Status](https://secure.travis-ci.org/lichtner/fluentpdo.png?branch=master)](http://travis-ci.org/lichtner/fluentpdo)\r\n\r\nFluentPDO - smart SQL builder for PHP.\r\n\r\nFluentPDO is small PHP library for rapid query building. Killer feature is \"Smart join builder\" which generates joins automatically.\r\n\r\n## Features\r\n\r\n- Fluent interface for creating queries step by step\r\n- Smart join builder\r\n- Simple API based on PDO and SQL syntax\r\n- Build SELECT, INSERT, UPDATE & DELETE queries\r\n- Small and fast\r\n- Type hinting with code completion in smart IDEs\r\n- Requires PHP 5.1+ with any database supported by PDO\r\n\r\n## Install\r\n\r\n### Composer\r\n\r\nThe preferred way to install FluentPDO is via [composer](http://getcomposer.org/).\r\n\r\nAdd in your `composer.json`:\r\n\r\n\t\"require\": {\r\n\t\t...\r\n\t\t\"lichtner/fluentpdo\": \"dev-master\"\t\r\n\t}\r\n\r\nthen update your dependencies with `composer update`.\r\n\r\n### Copy\r\n\r\nIf you are not familiar with composer just copy `/FluentPDO` directory into your `libs/` directory then:\r\n\r\n```php\r\ninclude \"libs/FluentPDO/FluentPDO.php\";\r\n```\r\n\r\n## Start usage\r\n\r\n```php\r\n$pdo = new PDO(\"mysql:dbname=fblog\", \"root\");\r\n$fpdo = new FluentPDO($pdo);\r\n```\r\n\r\n## First example\r\n\r\nFluentPDO is easy to use:\r\n\r\n```php\r\n$query = $fpdo->from('article')\r\n            ->where('published_at > ?', $date)\r\n            ->orderBy('published_at DESC')\r\n            ->limit(5);\r\nforeach ($query as $row) {\r\n    echo \"$row[title]\\n\";\r\n}\r\n```\r\nexecuted query is:\r\n\r\n```mysql\r\nSELECT article.*\r\nFROM article\r\nWHERE published_at > ?\r\nORDER BY published_at DESC\r\nLIMIT 5\r\n```\r\n\r\n## Smart join builder (how to build queries)\r\n\r\nIf you want to join table you can use full sql join syntax. For example we would like to show list of articles with author name:\r\n\r\n```php\r\n$query = $fpdo->from('article')\r\n              ->leftJoin('user ON user.id = article.user_id')\r\n              ->select('user.name');\r\n```\r\n\r\nIt was not so much smart, was it? ;-) If your database uses convention for primary and foreign key names, you can write only:\r\n\r\n```php\r\n$query = $fpdo->from('article')->leftJoin('user')->select('user.name');\r\n```\r\n\r\nSmarter? May be. but **best practice how to write joins is not to write any joins ;-)**\r\n\r\n```php\r\n$query = $fpdo->from('article')->select('user.name');\r\n```\r\n\r\nAll three commands create same query:\r\n\r\n```mysql\r\nSELECT article.*, user.name \r\nFROM article \r\nLEFT JOIN user ON user.id = article.user_id\r\n```\r\n\r\n## Simple CRUD Query Examples\r\n\r\n##### SELECT\r\n\r\n```php\r\n$query = $fpdo->from('article')->where('id', 1);\r\n// or shortly if you select one row by primary key\r\n$query = $fpdo->from('user', 1);\r\n```\r\n\r\n##### INSERT\r\n\r\n```php\r\n$values = array('title' => 'article 1', 'content' => 'content 1');\r\n$query = $fpdo->insertInto('article')->values($values);\r\n// or shortly\r\n$query = $fpdo->insertInto('article', $values);\r\n```\r\n\r\n##### UPDATE\r\n\r\n```php\r\n$set = array('published_at' => new FluentLiteral('NOW()'));\r\n$query = $fpdo->update('article')->set($set)->where('id', 1);\r\n// or shortly if you update one row by primary key\r\n$query = $fpdo->update('article', $set, 1);\r\n```\r\n\r\n##### DELETE\r\n\r\n```php\r\n$query = $fpdo->deleteFrom('article')->where('id', 1);\r\n// or shortly if you delete one row by primary key\r\n$query = $fpdo->deleteFrom('article', 1);\r\n```\r\n\r\n*Note: INSERT, UPDATE and DELETE will be executed after `->execute()`:*\r\n\r\n```php\r\n$fpdo->deleteFrom('article', 1)->execute();\r\n```\r\n\r\nFull documentation can be found on the [FluentPDO homepage](http://fluentpdo.com)\r\n\r\n## Licence\r\n\r\nFree for commercial and non-commercial use ([Apache License](http://www.apache.org/licenses/LICENSE-2.0.html) or [GPL](http://www.gnu.org/licenses/gpl-2.0.html)).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}