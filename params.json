{"name":"FluentPDO","tagline":"FluentPDO, smart SQL builder for PHP","body":"# FluentPDO [![Build Status](https://secure.travis-ci.org/lichtner/fluentpdo.png?branch=master)](http://travis-ci.org/lichtner/fluentpdo)\r\n\r\nFluentPDO - smart SQL builder for PHP.\r\n\r\nFluentPDO is small PHP library for rapid query building. Killer feature is \"Smart join builder\" which generates joins automatically.\r\n\r\n## Features\r\n\r\n- Fluent interface for creating queries step by step\r\n- Smart join builder\r\n- Simple API based on PDO and SQL syntax\r\n- Build SELECT, INSERT, UPDATE & DELETE queries\r\n- Small and fast\r\n- Type hinting with code completion in smart IDEs\r\n- Requires PHP 5.1+ with any database supported by PDO\r\n\r\n## References\r\n\r\n[Sitepoint - Getting Started with FluentPDO](http://www.sitepoint.com/getting-started-fluentpdo/)\r\n\r\n## Install\r\n\r\n### Composer\r\n\r\nThe preferred way to install FluentPDO is via [composer](http://getcomposer.org/).\r\n\r\nAdd in your `composer.json`:\r\n\r\n\t\"require\": {\r\n\t\t...\r\n\t\t\"lichtner/fluentpdo\": \"dev-master\"\t\r\n\t}\r\n\r\nthen update your dependencies with `composer update`.\r\n\r\n### Copy\r\n\r\nIf you are not familiar with composer just copy `/FluentPDO` directory into your `libs/` directory then:\r\n\r\n```php\r\ninclude \"libs/FluentPDO/FluentPDO.php\";\r\n```\r\n\r\n## Start usage\r\n\r\n```php\r\n$pdo = new PDO(\"mysql:dbname=blog\", \"root\", \"password\");\r\n$fpdo = new FluentPDO($pdo);\r\n```\r\n\r\n## First example\r\n\r\nFluentPDO is easy to use:\r\n\r\n```php\r\n$query = $fpdo->from('article')\r\n            ->where('published_at > ?', $date)\r\n            ->orderBy('published_at DESC')\r\n            ->limit(5);\r\nforeach ($query as $row) {\r\n    echo \"$row[title]\\n\";\r\n}\r\n```\r\nexecuted query is:\r\n\r\n```mysql\r\nSELECT article.*\r\nFROM article\r\nWHERE published_at > ?\r\nORDER BY published_at DESC\r\nLIMIT 5\r\n```\r\n\r\n## Smart join builder (how to build queries)\r\n\r\nIf you want to join table you can use full sql join syntax. For example we would like to show list of articles with author name:\r\n\r\n```php\r\n$query = $fpdo->from('article')\r\n              ->leftJoin('user ON user.id = article.user_id')\r\n              ->select('user.name');\r\n```\r\n\r\nIt was not so much smart, was it? ;-) If your database uses convention for primary and foreign key names, you can write only:\r\n\r\n```php\r\n$query = $fpdo->from('article')->leftJoin('user')->select('user.name');\r\n```\r\n\r\nSmarter? May be. but **best practice how to write joins is not to write any joins ;-)**\r\n\r\n```php\r\n$query = $fpdo->from('article')->select('user.name');\r\n```\r\n\r\nAll three commands create same query:\r\n\r\n```mysql\r\nSELECT article.*, user.name \r\nFROM article \r\nLEFT JOIN user ON user.id = article.user_id\r\n```\r\n\r\n## Simple CRUD Query Examples\r\n\r\n##### SELECT\r\n\r\n```php\r\n$query = $fpdo->from('article')->where('id', 1);\r\n// or shortly if you select one row by primary key\r\n$query = $fpdo->from('user', 1);\r\n```\r\n\r\n##### INSERT\r\n\r\n```php\r\n$values = array('title' => 'article 1', 'content' => 'content 1');\r\n$query = $fpdo->insertInto('article')->values($values);\r\n// or shortly\r\n$query = $fpdo->insertInto('article', $values);\r\n```\r\n\r\n##### UPDATE\r\n\r\n```php\r\n$set = array('published_at' => new FluentLiteral('NOW()'));\r\n$query = $fpdo->update('article')->set($set)->where('id', 1);\r\n// or shortly if you update one row by primary key\r\n$query = $fpdo->update('article', $set, 1);\r\n```\r\n\r\n##### DELETE\r\n\r\n```php\r\n$query = $fpdo->deleteFrom('article')->where('id', 1);\r\n// or shortly if you delete one row by primary key\r\n$query = $fpdo->deleteFrom('article', 1);\r\n```\r\n\r\n*Note: INSERT, UPDATE and DELETE will be executed after `->execute()`:*\r\n\r\n```php\r\n$fpdo->deleteFrom('article', 1)->execute();\r\n```\r\n\r\n### Back reference (referencing table)\r\n\r\nFor join referencing table use colon after table name.\r\n\r\n```php\r\n  $query = $fpdo->from('user')->leftJoin('article:')->select('article.title');\r\n  // or shortly\r\n  $query = $fpdo->from('user')->select('article:title');\r\n```\r\n\r\n```sql\r\n  SELECT user.*, article.title \r\n  FROM user \r\n      LEFT JOIN article ON article.user_id = user.id\r\n```\r\n\r\n### Alias for columns or tables\r\n\r\nYou can alias your column with `AS`:\r\n\r\n```php\r\n  $query = $fpdo->from('article')->select('user.name AS author_name');\r\n  SELECT article.*, user.name AS author_name \r\n  FROM article \r\n      LEFT JOIN user ON user.id = article.user_id\r\n```\r\n\r\nYou can join same table two times. Second table have to have another alias:\r\n\r\n```php\r\n   $query = $fpdo->from('article')\r\n              ->select('comment:user.name AS comment_user_name')\r\n              ->leftJoin('user AS article_author')\r\n                  ->select('article_author.name AS article_author_name');\r\n```\r\n\r\n```sql\r\n  SELECT article.*, user.name AS comment_user_name, article_author.name AS article_author_name \r\n  FROM article \r\n      LEFT JOIN comment ON comment.article_id = article.id  \r\n      LEFT JOIN user ON user.id = comment.user_id \r\n      LEFT JOIN user AS article_author ON article_author.id = article.user_id\r\n```\r\n\r\n### Multi reference\r\nAs you can see in previous example references via more then one table are also possible and you can combine dots and colons:\r\n\r\n```php\r\n  $query = $fpdo->from('article')->where('comment:user.country.name', $country);\r\n```\r\n\r\n```sql\r\n  SELECT article.* \r\n  FROM article \r\n      LEFT JOIN comment ON comment.article_id = article.id  \r\n      LEFT JOIN user ON user.id = comment.user_id  \r\n      LEFT JOIN country ON country.id = user.country_id \r\n  WHERE country.name = ?\r\n```\r\n\r\nFor more examples see subdirectory tests/\r\n\r\n## API\r\n\r\n### SELECT * FROM\r\n\r\nEvery SELECT query begins with `$fpdo->from($table)` followed by as many clauses as you want.\r\n\r\nsyntax                  | description\r\n------------------------|--------------------------------\r\n`from($table)`            | set $table in FROM clause\r\n`from($table, $id)`       | shortcut for from($table)->where('id = ?', $id)\r\n`select($columns[, ...])` | appends SELECT clause with $column or any expresion (e.g. CURDATE() AS today)\r\n`leftJoin($joinedTable)`<br>`innerJoin($joinedTable)` | appends LEFT JOIN or INNER JOIN clause,<br>$joinedTable could be \"tableName\" only or full join statement<br> (\"tableName:\" colon means back reference, see Smart join builder)\r\n`where($condition[, $parameters])`         | explained later\r\n`groupBy($columns[, ...])`                 | appends GROUP BY clause\r\n`having($columns[, ...])`                  | appends HAVING clause\r\n`orderBy($columns[, ...])`                 | appends ORDER BY clause\r\n`limit($limit)`                            | sets LIMIT clause\r\n`offset($offset)`                          | sets OFFSET clause\r\n`fetch($column = '')`                      | fetch first row or column only from first row\r\n`fetchPairs($key, $value)`                  | fetch pairs\r\n`fetchAll($index = '', $selectOnly = '')`   | fetch all rows. You can specify for fetched array index-column and which columns will be fetched.\r\n\r\nYou can add clauses `select(), where(), groupBy(), having(), orderBy()` as many times as you want. Everything will be appended into query. Clauses `from(), limit(), offset()` rewrite previous setting.\r\n\r\nIf you want to reset a clause (i.e. remove previous defined statements), call any clause with `null`. E.g.:\r\n\r\n```php\r\n$query = $query->where(null);   // remove all prev defined where() clauses\r\n$query = $query->orderBy(null); // remove all prev defined orderBy() clauses\r\n$query = $query->select(null)->select('id'); # set \"SELECT id FROM ....\"\r\n```\r\n\r\n### WHERE \r\n\r\nRepetitive calls of `where()` are connected with `AND`. The `where()` $condition can contain ? or :name which is bound by `PDO` (so no manual escaping is required). If the question mark and colon are missing in `where()` $condition then the behavior is:\r\n\r\n\r\nsyntax                          | description\r\n--------------------------------|-------------\r\n`$table->where(\"field\", \"x\")`   | Translated to field = 'x'\r\n`$table->where(\"field\", null)`  | Translated to field IS NULL\r\n`$table->where(null)`           | beware, where(null) reset clause and remove all prev defined conditions\r\n`$table->where(\"field\", array(\"x\", \"y\"))` | Translated to field IN ('x', 'y')\r\n`$table->where(\"field > ?\", \"x\")` | bound by PDO\r\n`$table->where(\"field > :name\", array(':name' => 'x'))` | bound by PDO\r\n`$table->where(array(\"field1\" => \"value1\", ...))` | Translated to field1 = 'value1' AND ...\r\n\r\nEvery value is automatically escaped.\r\n\r\n### Debugging\r\nYou can debug queries, parameters, executed time and row count. For debugging set property debug:\r\n\r\n```php\r\n$fpdo->debug = true        // log queries to STDERR (for console debugging)\r\n$fpdo->debug = $callback   // or set $callback($FluentQuery)  \r\n                           // @see tests/26-debug.phpt for expample usage\r\n```\r\n\r\n## Licence\r\n\r\nFree for commercial and non-commercial use ([Apache License](http://www.apache.org/licenses/LICENSE-2.0.html) or [GPL](http://www.gnu.org/licenses/gpl-2.0.html)).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}